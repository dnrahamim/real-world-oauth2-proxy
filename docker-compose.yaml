# This docker-compose file can be used to bring up an example instance of oauth2-proxy
# for manual testing and exploration of features.
# Alongside OAuth2-Proxy, this file also starts Dex to act as the identity provider,
# etcd for storage for Dex  and nginx as an example upstream.
#
# This can either be created using docker-compose
#    docker-compose -f docker-compose.yaml <command>
# Or:
#    make <command> (eg. make up, make down)
#
# Access http://oauth2-proxy.localtest.me:4180 to initiate a login cycle
version: '3.0'
services:
  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    command: --config /oauth2-proxy.cfg
    hostname: oauth2-proxy
    volumes:
      - "./oauth2-proxy.cfg:/oauth2-proxy.cfg"
    restart: unless-stopped
    ports:
      - 4180:4180/tcp
    networks:
      nginx: {}
    depends_on:
      - nginx

  etcd:
    container_name: etcd
    image: gcr.io/etcd-development/etcd:v3.5.11
    entrypoint: /usr/local/bin/etcd
    command:
      - --listen-client-urls=http://0.0.0.0:2379
      - --advertise-client-urls=http://etcd:2379
    networks:
      etcd: {}
      
  nginx:
    depends_on:
      - api
      - client
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    volumes:
      - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
    ports:
      - "8080:80/tcp"
    networks:
      nginx:
        aliases:
          - nginx.localtest.me

  mysql:
    image: mysql:8.3
    platform: linux/x86_64
    restart: unless-stopped
    ports:
      - 3306:3306
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - mysql:/var/lib/mysql
    networks:
      nginx: {}

  api:
    build:
      dockerfile: Dockerfile.dev
      context: "./nestjs-realworld-example-app"
    volumes:
      - /app/node_modules
      - ./nestjs-realworld-example-app:/app
    ports:
      - '5000:3000'
    depends_on:
      - mysql
    networks:
      nginx: {}

  client:
    stdin_open: true
    ports:
      - "3000:3000"
    build:
      dockerfile: Dockerfile.dev
      context: ./ts-redux-react-realworld-example-app
    volumes:
      - /app/node_modules
      - ./ts-redux-react-realworld-example-app:/app
    networks:
      nginx: {}
      
volumes:
  mysql:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  etcd: {}
  nginx: {}
